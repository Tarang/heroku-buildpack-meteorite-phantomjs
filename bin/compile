#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
NODE_VERSION="0.10.23"
NPM_VERSION="1.3.11"
SCONS_VERSION="1.2.0"
S3_BUCKET="heroku-buildpack-nodejs"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*"
  exit 1
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function run_npm() {
  command="$1"

  cd $BUILD_DIR
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NPM/cli.js $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="http://${S3_BUCKET}.s3.amazonaws.com/$engine-$version.tgz"
  curl $package -s -o - | tar xzf - -C $location
}

function cat_npm_debug_log() {
  if [ -f $BUILD_DIR/npm-debug.log ]; then
cat $BUILD_DIR/npm-debug.log
  fi
}

trap cat_npm_debug_log EXIT

# cache directories
CACHE_STORE_DIR="$CACHE_DIR/node_modules/$NODE_VERSION"
CACHE_TARGET_DIR="$BUILD_DIR/node_modules"

# s3 packages
NODE_PACKAGE="http://s3pository.heroku.com/node/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz"
NPM_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/npm-${NPM_VERSION}.tgz"
SCONS_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/scons-${SCONS_VERSION}.tgz"

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_NPM="$(mktmpdir npm)"
VENDORED_SCONS="$(mktmpdir scons)"
VENDORED_MODULES="$(mktmpdir modules)"

# download and unpack packages
echo "-----> Fetching Node.js binaries"
package_download "nodejs" "${NODE_VERSION}" "${VENDORED_NODE}"
package_download "npm" "${NPM_VERSION}" "${VENDORED_NPM}"
package_download "scons" "${SCONS_VERSION}" "${VENDORED_SCONS}"

# vendor node into the slug
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring node into slug"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$BUILD_DIR/bin/node"

# setting up paths for building
PATH="$VENDORED_SCONS:$VENDORED_NODE/bin:$VENDORED_MODULES/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export npm_config_prefix="$VENDORED_MODULES"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"


############################################
# install meteorite
############################################
echo "-----> Installing meteorite with npm"
run_npm "install meteorite -g"
echo "Meteorite installed" | indent

METEOR_BUILD_DIR="$BUILD_DIR/.meteor/heroku_build"
mkdir -p "$HOME"

############################################
# install meteor + packages through mrt
# bundle, and install into app/
############################################
cd $BUILD_DIR
echo "-> Installing meteor" | indent
# Using different folder to prevent install script form deleting packages file
VENDORED_METEOR="$(mktmpdir meteor)"
curl https://install.meteor.com | HOME="$VENDORED_METEOR" /bin/sh | indent
echo "->Meteor installed" | indent


echo "->Installing packages" | indent
HOME="$BUILD_DIR" mrt install | indent
echo "->Building meteor bundle" | indent
HOME="$VENDORED_METEOR" "$VENDORED_METEOR"/.meteor/meteor bundle "$CACHE_DIR"/bundle.tar.gz 2>&1 | indent
echo "-> Bundled" | indent
mkdir -p "$METEOR_BUILD_DIR"/app
echo "-> Unpacking bundle" | indent
tar -zxf "$CACHE_DIR"/bundle.tar.gz --strip-components 1 -C "$METEOR_BUILD_DIR"/app
echo "-> Bundle unpacked" | indent
rm "$CACHE_DIR"/bundle.tar.gz
echo "-> Bundle cleared" | indent

############################################

## phantomjs

PHANTOMJSVERSION="1.9.0"
S3_BUCKET="stomita-buildpack-phantomjs"

# s3 packages
FILE_NAME="buildpack-phantomjs-${PHANTOMJSVERSION}.tar.gz"
BUILDPACK_PHANTOMJS_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/${FILE_NAME}"

echo "-----> PhantomJS version: ${PHANTOMJSVERSION}"

mkdir -p $CACHE_DIR
if ! [ -e $CACHE_DIR/$FILE_NAME ]; then
  echo "-----> Fetching PhantomJS buildpack binaries"
  curl $BUILDPACK_PHANTOMJS_PACKAGE -s -o $CACHE_DIR/$FILE_NAME
fi

echo "-----> Extracting PhantomJS binaries"
mkdir -p $BUILD_DIR/vendor/phantomjs
tar zxf $CACHE_DIR/$FILE_NAME -C $BUILD_DIR/vendor/phantomjs

############################################
# Prepare ENV vars
############################################
echo "Setting up MONGO_URL in .profile.d"
mkdir -p $BUILD_DIR/.profile.d
cat > $BUILD_DIR/.profile.d/mongo.sh <<EOF
  #!/bin/sh

  export MONGO_URL=\${MONGO_URL:-\$MONGOLAB_URI};
EOF

# vendor node into the slug
echo "-----> Vendoring node into slug"
mkdir -p "$METEOR_BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$METEOR_BUILD_DIR/bin/node"
